{"version":3,"sources":["hooks/useDocumentTitle.js","components/TodoCompletedBadge.js","components/HasError.js","components/TodoListGroupItem.js","components/TodoListGroup.js","components/pages/TodoListPage.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","useDocumentTitle","title","useEffect","document","react__WEBPACK_IMPORTED_MODULE_0___default","n","reactstrap__WEBPACK_IMPORTED_MODULE_1__","TodoCompletedBadge","_ref","completed","a","createElement","color","HasError","_ref$message","message","react_default","className","TodoListGroupItem","id","text","deleteTodo","useContext","TodoContext","handleDelete","_ref2","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","catch","_ref3","alert","concat","stop","this","apply","arguments","reactstrap_es","es","to","makeTo","type","onClick","TodoListGroup","todos","map","todo","components_TodoListGroupItem","assign","key","TodoListPage","_useContext","isLoading","error","xs","IsLoading","components_HasError","length","components_TodoListGroup"],"mappings":"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","file":"static/js/TodoListPage.f3682403.chunk.js","sourcesContent":["import { useEffect } from 'react';\n\nconst useDocumentTitle = title => {\n  useEffect(\n    () => {\n      document.title = title;\n    },\n    [title]\n  );\n};\n\nexport default useDocumentTitle;\n","import React from 'react';\nimport { Badge } from 'reactstrap';\n\nconst TodoCompletedBadge = ({ completed }) => (\n  <Badge color={completed ? 'success' : 'danger'}>\n    {completed ? 'Completed' : 'Not Completed'}\n  </Badge>\n);\n\nexport default TodoCompletedBadge;\n","import React from 'react';\n\nconst HasError = ({ message = null }) => (\n  <p className=\"text-center text-danger\">{message || 'Error!'}</p>\n);\n\nexport default HasError;\n","import React, { useContext } from 'react';\nimport { Link } from '@reach/router';\nimport { ListGroupItem } from 'reactstrap';\nimport TodoContext from '../contexts/TodoContext';\nimport TodoCompletedBadge from './TodoCompletedBadge';\nimport { makeTo } from '../utils/router';\n\nconst TodoListGroupItem = ({ id, text, completed }) => {\n  const { deleteTodo } = useContext(TodoContext);\n\n  const handleDelete = async () => {\n    await deleteTodo(id).catch(({ message }) =>\n      alert(`Error deleting todo: ${message}`)\n    );\n  };\n\n  return (\n    <ListGroupItem className=\"text-center\">\n      <h2>\n        {text} <TodoCompletedBadge completed={completed} />\n      </h2>\n      <Link to={makeTo(`/details/${id}`)}>Details</Link>\n      <span className=\"text-muted\"> | </span>\n      <Link to={makeTo(`/update/${id}`)}>Update</Link>\n      <span className=\"text-muted\"> | </span>\n      <button type=\"button\" className=\"look-like-a-link\" onClick={handleDelete}>\n        Delete\n      </button>\n    </ListGroupItem>\n  );\n};\nexport default TodoListGroupItem;\n","import React from 'react';\nimport { ListGroup } from 'reactstrap';\nimport TodoListGroupItem from './TodoListGroupItem';\n\nconst TodoListGroup = ({ todos }) => (\n  <ListGroup>\n    {todos.map(todo => (\n      <TodoListGroupItem key={todo.id} {...todo} />\n    ))}\n  </ListGroup>\n);\n\nexport default TodoListGroup;\n","import React, { useContext } from 'react';\nimport { Link } from '@reach/router';\nimport { Row, Col } from 'reactstrap';\nimport TodoContext from '../../contexts/TodoContext';\nimport IsLoading from '../IsLoading';\nimport HasError from '../HasError';\nimport TodoListGroup from '../TodoListGroup';\nimport useDocumentTitle from '../../hooks/useDocumentTitle';\n\nimport { makeTo } from '../../utils/router';\n\nconst TodoListPage = () => {\n  useDocumentTitle('All Todos');\n  const { isLoading, error, todos } = useContext(TodoContext);\n\n  return (\n    <Row>\n      <Col xs={12} className=\"text-center\">\n        <h1>All Todos</h1>\n        <Link to={makeTo('/create')}>Create</Link>\n        <hr />\n      </Col>\n      <Col xs={12}>\n        {(() => {\n          if (isLoading) {\n            return <IsLoading message=\"Loading todos...\" />;\n          }\n\n          if (error) {\n            return (\n              <HasError message={`Error loading todos: ${error.message}`} />\n            );\n          }\n\n          return todos.length ? (\n            <TodoListGroup todos={todos} />\n          ) : (\n            <p className=\"text-center\">No todos.</p>\n          );\n        })()}\n      </Col>\n    </Row>\n  );\n};\n\nexport default TodoListPage;\n"],"sourceRoot":""}